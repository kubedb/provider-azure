/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlexibleDatabaseObservation struct {

	// Specifies the Charset for the MySQL Database, which needs to be a valid MySQL Charset. Changing this forces a new resource to be created.
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Specifies the Collation for the MySQL Database, which needs to be a valid MySQL Collation. Changing this forces a new resource to be created.
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// The ID of the MySQL Database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type FlexibleDatabaseParameters struct {

	// Specifies the Charset for the MySQL Database, which needs to be a valid MySQL Charset. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Specifies the Collation for the MySQL Database, which needs to be a valid MySQL Collation. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// The name of the resource group in which the MySQL Server exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// Specifies the name of the MySQL Flexible Server. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=FlexibleServer
	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`

	// Reference to a FlexibleServer to populate serverName.
	// +kubebuilder:validation:Optional
	ServerNameRef *v1.Reference `json:"serverNameRef,omitempty" tf:"-"`

	// Selector for a FlexibleServer to populate serverName.
	// +kubebuilder:validation:Optional
	ServerNameSelector *v1.Selector `json:"serverNameSelector,omitempty" tf:"-"`
}

// FlexibleDatabaseSpec defines the desired state of FlexibleDatabase
type FlexibleDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlexibleDatabaseParameters `json:"forProvider"`
}

// FlexibleDatabaseStatus defines the observed state of FlexibleDatabase.
type FlexibleDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlexibleDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FlexibleDatabase is the Schema for the FlexibleDatabases API. Manages a MySQL Database within a MySQL Flexible Server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type FlexibleDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.charset)",message="charset is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.collation)",message="collation is a required parameter"
	Spec   FlexibleDatabaseSpec   `json:"spec"`
	Status FlexibleDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlexibleDatabaseList contains a list of FlexibleDatabases
type FlexibleDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlexibleDatabase `json:"items"`
}

// Repository type metadata.
var (
	FlexibleDatabase_Kind             = "FlexibleDatabase"
	FlexibleDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FlexibleDatabase_Kind}.String()
	FlexibleDatabase_KindAPIVersion   = FlexibleDatabase_Kind + "." + CRDGroupVersion.String()
	FlexibleDatabase_GroupVersionKind = CRDGroupVersion.WithKind(FlexibleDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&FlexibleDatabase{}, &FlexibleDatabaseList{})
}
