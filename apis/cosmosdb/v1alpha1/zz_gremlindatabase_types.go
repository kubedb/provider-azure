/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GremlinDatabaseAutoscaleSettingsObservation struct {

	// The maximum throughput of the Gremlin database (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	MaxThroughput *float64 `json:"maxThroughput,omitempty" tf:"max_throughput,omitempty"`
}

type GremlinDatabaseAutoscaleSettingsParameters struct {

	// The maximum throughput of the Gremlin database (RU/s). Must be between 1,000 and 1,000,000. Must be set in increments of 1,000. Conflicts with throughput.
	// +kubebuilder:validation:Optional
	MaxThroughput *float64 `json:"maxThroughput,omitempty" tf:"max_throughput,omitempty"`
}

type GremlinDatabaseObservation struct {

	// The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// An autoscale_settings block as defined below.
	AutoscaleSettings []GremlinDatabaseAutoscaleSettingsObservation `json:"autoscaleSettings,omitempty" tf:"autoscale_settings,omitempty"`

	// The ID of the CosmosDB Gremlin Database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the resource group in which the Cosmos DB Gremlin Database is created. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The throughput of the Gremlin database (RU/s). Must be set in increments of 100. The minimum value is 400.
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`
}

type GremlinDatabaseParameters struct {

	// The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// An autoscale_settings block as defined below.
	// +kubebuilder:validation:Optional
	AutoscaleSettings []GremlinDatabaseAutoscaleSettingsParameters `json:"autoscaleSettings,omitempty" tf:"autoscale_settings,omitempty"`

	// The name of the resource group in which the Cosmos DB Gremlin Database is created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// The throughput of the Gremlin database (RU/s). Must be set in increments of 100. The minimum value is 400.
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`
}

// GremlinDatabaseSpec defines the desired state of GremlinDatabase
type GremlinDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GremlinDatabaseParameters `json:"forProvider"`
}

// GremlinDatabaseStatus defines the observed state of GremlinDatabase.
type GremlinDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GremlinDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GremlinDatabase is the Schema for the GremlinDatabases API. Manages a Gremlin Database within a Cosmos DB Account.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GremlinDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GremlinDatabaseSpec   `json:"spec"`
	Status            GremlinDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GremlinDatabaseList contains a list of GremlinDatabases
type GremlinDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GremlinDatabase `json:"items"`
}

// Repository type metadata.
var (
	GremlinDatabase_Kind             = "GremlinDatabase"
	GremlinDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GremlinDatabase_Kind}.String()
	GremlinDatabase_KindAPIVersion   = GremlinDatabase_Kind + "." + CRDGroupVersion.String()
	GremlinDatabase_GroupVersionKind = CRDGroupVersion.WithKind(GremlinDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&GremlinDatabase{}, &GremlinDatabaseList{})
}
